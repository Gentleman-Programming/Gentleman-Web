---
// Hero Hub - Nivel 1: Pantalla de t√≠tulo estilo RPG con i18n
import { t } from '../i18n/index.ts';
---

<section id="hero" class="min-h-screen flex items-center justify-center relative overflow-hidden bg-bg-dark">
  <!-- Animated Background Elements -->
  <div class="absolute inset-0 pointer-events-none">
    <!-- Starfield Background -->
    <div class="starfield"></div>
    <div class="pixel-grid"></div>

    <!-- Floating Particles -->
    <div class="particle particle-1"></div>
    <div class="particle particle-2"></div>
    <div class="particle particle-3"></div>
    <div class="particle particle-4"></div>
    <div class="particle particle-5"></div>

    <!-- Geometric Pattern Overlay -->
    <div class="geometric-bg opacity-20"></div>
  </div>

  <!-- Main Title Panel -->
  <div class="hero-panel relative z-10 fade-in-up">
    <!-- Panel Border Decoration -->
    <div class="panel-decoration panel-decoration-top"></div>
    <div class="panel-decoration panel-decoration-bottom"></div>
    <div class="panel-decoration panel-decoration-left"></div>
    <div class="panel-decoration panel-decoration-right"></div>

    <!-- Gentleman Avatar -->
    <div class="hero-avatar text-center mb-6">
      <div class="gentleman-avatar mx-auto mb-4 animate-pixel-float"></div>
      <div class="avatar-nameplate font-pixel text-pixel-sm text-primary-genie text-shadow-glow-pink">
        GENTLEMAN PROGRAMMING
      </div>
    </div>

    <!-- Title Content -->
    <div class="hero-content">
      <!-- Subtitle -->
      <div class="section-subtitle font-code text-sm text-pixel-cyan text-center mb-4">
        <span class="blinking-cursor animate-pixel-blink">‚ñ∫</span>
        <span data-lang="en">{t('hero.subtitle', 'en')}</span>
        <span data-lang="es" style="display: none;">{t('hero.subtitle', 'es')}</span>
      </div>

      <!-- Main Title -->
      <h1 class="hero-title font-heading text-4xl md:text-6xl font-bold text-center mb-6">
        <div data-lang="en">
          <span class="text-pixel-cyan animate-text-glow-cyan">{t('hero.title.mentoring', 'en')}</span>
          <span class="text-text-primary mx-2">|</span>
          <span class="text-pixel-green animate-text-glow-green" style="animation-delay: 0.5s;">{t('hero.title.consulting', 'en')}</span>
          <span class="text-text-primary mx-2">|</span>
          <span class="text-secondary-yellow animate-text-glow-yellow" style="animation-delay: 1s;">{t('hero.title.talks', 'en')}</span>
        </div>
        <div data-lang="es" style="display: none;">
          <span class="text-pixel-cyan animate-text-glow-cyan">{t('hero.title.mentoring', 'es')}</span>
          <span class="text-text-primary mx-2">|</span>
          <span class="text-pixel-green animate-text-glow-green" style="animation-delay: 0.5s;">{t('hero.title.consulting', 'es')}</span>
          <span class="text-text-primary mx-2">|</span>
          <span class="text-secondary-yellow animate-text-glow-yellow" style="animation-delay: 1s;">{t('hero.title.talks', 'es')}</span>
        </div>
      </h1>

      <!-- Tagline -->
      <div class="hero-tagline font-code text-lg md:text-xl text-text-secondary text-center mb-8">
        <div class="typing-text" data-lang="en">{t('hero.tagline', 'en')}</div>
        <div class="typing-text" data-lang="es" style="display: none;">{t('hero.tagline', 'es')}</div>
      </div>

      <!-- Menu Options -->
      <div class="hero-menu space-y-3 max-w-md mx-auto">
        <button
          class="menu-item w-full text-left group pixel-panel"
          onclick="scrollToSection('services-individual')"
          role="button"
          tabindex="0"
          data-quest-type="individual"
        >
          <span class="menu-icon text-2xl">‚öîÔ∏è</span>
          <div class="menu-content flex-1">
            <div class="menu-text font-heading text-lg font-bold text-text-primary">
              <span data-lang="en">{t('hero.menu.individual.text', 'en')}</span>
              <span data-lang="es" style="display: none;">{t('hero.menu.individual.text', 'es')}</span>
            </div>
            <div class="menu-description font-code text-sm text-text-secondary">
              <span data-lang="en">{t('hero.menu.individual.description', 'en')}</span>
              <span data-lang="es" style="display: none;">{t('hero.menu.individual.description', 'es')}</span>
            </div>
          </div>
          <div class="menu-arrow text-primary-genie opacity-0 group-hover:opacity-100 transition-opacity">‚ñ∂</div>
        </button>

        <button
          class="menu-item w-full text-left group pixel-panel"
          onclick="scrollToSection('services-business')"
          role="button"
          tabindex="0"
          data-quest-type="business"
        >
          <span class="menu-icon text-2xl">üè∞</span>
          <div class="menu-content flex-1">
            <div class="menu-text font-heading text-lg font-bold text-text-primary">
              <span data-lang="en">{t('hero.menu.business.text', 'en')}</span>
              <span data-lang="es" style="display: none;">{t('hero.menu.business.text', 'es')}</span>
            </div>
            <div class="menu-description font-code text-sm text-text-secondary">
              <span data-lang="en">{t('hero.menu.business.description', 'en')}</span>
              <span data-lang="es" style="display: none;">{t('hero.menu.business.description', 'es')}</span>
            </div>
          </div>
          <div class="menu-arrow text-primary-genie opacity-0 group-hover:opacity-100 transition-opacity">‚ñ∂</div>
        </button>

        <button
          class="menu-item w-full text-left group pixel-panel"
          onclick="scrollToSection('about')"
          role="button"
          tabindex="0"
        >
          <span class="menu-icon text-2xl">üìñ</span>
          <div class="menu-content flex-1">
            <div class="menu-text font-heading text-lg font-bold text-text-primary">
              <span data-lang="en">{t('hero.menu.about.text', 'en')}</span>
              <span data-lang="es" style="display: none;">{t('hero.menu.about.text', 'es')}</span>
            </div>
            <div class="menu-description font-code text-sm text-text-secondary">
              <span data-lang="en">{t('hero.menu.about.description', 'en')}</span>
              <span data-lang="es" style="display: none;">{t('hero.menu.about.description', 'es')}</span>
            </div>
          </div>
          <div class="menu-arrow text-primary-genie opacity-0 group-hover:opacity-100 transition-opacity">‚ñ∂</div>
        </button>
      </div>

      <!-- Stats Preview -->
      <div class="hero-stats mt-12 grid grid-cols-3 gap-6 text-center">
        <div class="stat-item pixel-panel p-4">
          <div class="stat-value font-heading text-2xl md:text-3xl font-bold text-gold">+50</div>
          <div class="stat-label font-code text-xs text-text-secondary uppercase tracking-wider">
            <span data-lang="en">{t('hero.stats.quests', 'en')}</span>
            <span data-lang="es" style="display: none;">{t('hero.stats.quests', 'es')}</span>
          </div>
          <div class="stat-icon mt-2">üó°Ô∏è</div>
        </div>
        <div class="stat-item pixel-panel p-4">
          <div class="stat-value font-heading text-2xl md:text-3xl font-bold text-pixel-cyan">+85K</div>
          <div class="stat-label font-code text-xs text-text-secondary uppercase tracking-wider">
            <span data-lang="en">{t('hero.stats.youtube', 'en')}</span>
            <span data-lang="es" style="display: none;">{t('hero.stats.youtube', 'es')}</span>
          </div>
          <div class="stat-icon mt-2">üì∫</div>
        </div>
        <div class="stat-item pixel-panel p-4">
          <div class="stat-value font-heading text-2xl md:text-3xl font-bold text-pixel-green">+15.2K</div>
          <div class="stat-label font-code text-xs text-text-secondary uppercase tracking-wider">
            <span data-lang="en">{t('hero.stats.twitch', 'en')}</span>
            <span data-lang="es" style="display: none;">{t('hero.stats.twitch', 'es')}</span>
          </div>
          <div class="stat-icon mt-2">üéÆ</div>
        </div>
      </div>

      <!-- Call to Action -->
      <div class="hero-cta text-center mt-8">
        <button class="btn-pixel-main" onclick="scrollToSection('services-individual')">
          <span class="btn-icon">üöÄ</span>
          <span class="btn-text" data-lang="en">{t('hero.cta.button', 'en')}</span>
          <span class="btn-text" data-lang="es" style="display: none;">{t('hero.cta.button', 'es')}</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Scroll Indicator -->
  <div class="scroll-indicator absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
    <div class="scroll-arrow font-code text-xl text-pixel-cyan">‚ñº</div>
    <div class="scroll-text font-pixel text-pixel-xs text-text-secondary mt-2">
      <span data-lang="en">{t('hero.scrollIndicator', 'en')}</span>
      <span data-lang="es" style="display: none;">{t('hero.scrollIndicator', 'es')}</span>
    </div>
  </div>
</section>

<style>
  /* === HERO PANEL STYLING === */
  .hero-panel {
    background: linear-gradient(
      135deg,
      rgba(26, 26, 46, 0.95) 0%,
      rgba(22, 33, 62, 0.9) 50%,
      rgba(16, 33, 78, 0.9) 100%
    );
    border: 3px solid var(--primary-genie);
    border-radius: 12px;
    padding: 3rem;
    max-width: 900px;
    position: relative;
    backdrop-filter: blur(12px);
    box-shadow:
      0 0 40px rgba(255, 102, 178, 0.4),
      0 0 80px rgba(255, 102, 178, 0.2),
      inset 2px 2px 0 rgba(255, 255, 255, 0.1),
      8px 8px 0 rgba(0, 0, 0, 0.6);
    overflow: hidden;
  }

  .hero-panel::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 102, 178, 0.1),
      transparent
    );
    animation: panelShine 4s ease-in-out infinite;
  }

  @keyframes panelShine {
    0% { left: -100%; }
    50% { left: 100%; }
    100% { left: 100%; }
  }

  /* === PANEL DECORATIONS === */
  .panel-decoration {
    position: absolute;
    background: linear-gradient(45deg, var(--primary-genie), var(--secondary-yellow));
    box-shadow: 0 0 15px var(--primary-genie);
  }

  .panel-decoration-top,
  .panel-decoration-bottom {
    height: 4px;
    width: 60px;
    left: 50%;
    transform: translateX(-50%);
  }

  .panel-decoration-top { top: -4px; }
  .panel-decoration-bottom { bottom: -4px; }

  .panel-decoration-left,
  .panel-decoration-right {
    width: 4px;
    height: 60px;
    top: 50%;
    transform: translateY(-50%);
  }

  .panel-decoration-left { left: -4px; }
  .panel-decoration-right { right: -4px; }

  /* === AVATAR NAMEPLATE === */
  .avatar-nameplate {
    position: relative;
    padding: 4px 12px;
    background: rgba(22, 33, 62, 0.8);
    border: 1px solid var(--primary-genie);
    border-radius: 4px;
    display: inline-block;
  }

  /* === HERO TITLE ANIMATION === */
  .hero-title {
    text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.8);
    position: relative;
  }

  /* === TYPING ANIMATION === */
  .typing-text {
    overflow: hidden;
    border-right: 2px solid var(--primary-genie);
    white-space: nowrap;
    margin: 0 auto;
    max-width: fit-content;
    animation:
      typing 4s steps(40, end) forwards,
      blink-caret 1s step-end infinite;
  }

  @keyframes typing {
    from { width: 0; }
    to { width: 100%; }
  }

  @keyframes blink-caret {
    from, to { border-color: transparent; }
    50% { border-color: var(--primary-genie); }
  }

  /* === MENU ITEM ENHANCEMENTS === */
  .menu-item {
    display: flex;
    align-items: center;
    padding: 1.5rem;
    background: linear-gradient(
      135deg,
      rgba(26, 26, 46, 0.8) 0%,
      rgba(22, 33, 62, 0.8) 100%
    );
    border: 2px solid var(--pixel-border);
    border-radius: 8px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    cursor: pointer;
  }

  .menu-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 102, 178, 0.1),
      transparent
    );
    transition: left 0.6s ease;
  }

  .menu-item:hover::before,
  .menu-item:focus::before {
    left: 100%;
  }

  .menu-item:hover,
  .menu-item:focus {
    background: linear-gradient(
      135deg,
      rgba(255, 102, 178, 0.1) 0%,
      rgba(22, 33, 62, 0.9) 100%
    );
    border-color: var(--primary-genie);
    transform: translateY(-2px);
    box-shadow:
      0 0 30px rgba(255, 102, 178, 0.4),
      0 8px 32px rgba(255, 102, 178, 0.2),
      inset 2px 2px 0 rgba(255, 255, 255, 0.1);
  }

  .menu-icon {
    margin-right: 1rem;
    transition: all 0.3s ease;
    filter: drop-shadow(0 0 10px currentColor);
  }

  .menu-item:hover .menu-icon,
  .menu-item:focus .menu-icon {
    transform: scale(1.2) rotate(5deg);
    filter: drop-shadow(0 0 20px currentColor);
  }

  .menu-content {
    margin-right: 1rem;
  }

  .menu-text {
    margin-bottom: 4px;
  }

  .menu-description {
    opacity: 0.8;
    transition: all 0.3s ease;
  }

  .menu-item:hover .menu-description,
  .menu-item:focus .menu-description {
    opacity: 1;
    color: var(--text-primary);
  }

  .menu-arrow {
    font-size: 1.2rem;
    transition: all 0.3s ease;
  }

  .menu-item:hover .menu-arrow,
  .menu-item:focus .menu-arrow {
    transform: translateX(4px);
  }

  /* === ANIMATED PARTICLES === */
  .particle {
    position: absolute;
    width: 6px;
    height: 6px;
    background: var(--primary-genie);
    border-radius: 50%;
    opacity: 0.6;
    box-shadow: 0 0 10px currentColor;
  }

  .particle-1 {
    top: 20%;
    left: 10%;
    animation: float 6s ease-in-out infinite;
  }

  .particle-2 {
    top: 60%;
    left: 20%;
    animation: float 8s ease-in-out infinite 1s;
    background: var(--pixel-cyan);
  }

  .particle-3 {
    top: 30%;
    right: 15%;
    animation: float 7s ease-in-out infinite 2s;
    background: var(--secondary-yellow);
  }

  .particle-4 {
    bottom: 40%;
    right: 25%;
    animation: float 9s ease-in-out infinite 0.5s;
    background: var(--pixel-green);
  }

  .particle-5 {
    bottom: 20%;
    left: 30%;
    animation: float 5s ease-in-out infinite 1.5s;
    background: var(--highlight-purple);
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0px) rotate(0deg) scale(1);
      opacity: 0.6;
    }
    25% {
      transform: translateY(-20px) rotate(90deg) scale(1.2);
      opacity: 0.8;
    }
    50% {
      transform: translateY(-10px) rotate(180deg) scale(0.8);
      opacity: 1;
    }
    75% {
      transform: translateY(-30px) rotate(270deg) scale(1.1);
      opacity: 0.7;
    }
  }

  /* === STATS ENHANCEMENTS === */
  .stat-item {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
  }

  .stat-item:hover {
    transform: translateY(-4px) scale(1.05);
    box-shadow:
      0 0 30px rgba(255, 215, 0, 0.3),
      0 8px 32px rgba(255, 215, 0, 0.2),
      inset 2px 2px 0 rgba(255, 255, 255, 0.15);
  }

  .stat-value {
    text-shadow: 0 0 20px currentColor;
    position: relative;
  }

  .stat-icon {
    font-size: 1.5rem;
    opacity: 0.7;
    transition: all 0.3s ease;
  }

  .stat-item:hover .stat-icon {
    opacity: 1;
    transform: scale(1.2);
    filter: drop-shadow(0 0 10px currentColor);
  }

  /* === SCROLL INDICATOR === */
  .scroll-indicator {
    text-align: center;
  }

  .scroll-arrow {
    text-shadow: 0 0 10px currentColor;
  }

  /* === RESPONSIVE DESIGN === */
  @media (max-width: 768px) {
    .hero-panel {
      padding: 2rem;
      margin: 1rem;
      max-width: none;
    }

    .hero-title {
      font-size: 2.5rem;
      line-height: 1.2;
    }

    .hero-title span {
      display: block;
      margin: 0.5rem 0;
    }

    .hero-title .text-text-primary {
      display: none;
    }

    .menu-item {
      padding: 1rem;
    }

    .menu-icon {
      font-size: 1.5rem;
    }

    .menu-text {
      font-size: 1rem;
    }

    .hero-stats {
      grid-template-columns: 1fr;
      gap: 1rem;
      margin-top: 2rem;
    }

    .stat-item {
      padding: 1rem;
    }

    .stat-value {
      font-size: 1.5rem;
    }
  }

  @media (max-width: 480px) {
    .hero-panel {
      padding: 1.5rem;
    }

    .hero-title {
      font-size: 2rem;
    }

    .typing-text {
      font-size: 1rem;
    }

    .menu-item {
      padding: 0.75rem;
    }

    .btn-pixel-main {
      padding: 12px 24px;
      font-size: 16px;
    }
  }

  /* === ACCESSIBILITY === */
  @media (prefers-reduced-motion: reduce) {
    .hero-panel::before,
    .particle,
    .typing-text,
    .scroll-indicator {
      animation: none;
    }

    .typing-text {
      border-right: none;
      width: 100%;
    }
  }

  @media (prefers-contrast: high) {
    .hero-panel {
      border-width: 4px;
    }

    .menu-item {
      border-width: 3px;
    }
  }

  /* Focus indicators for keyboard navigation */
  .menu-item:focus-visible {
    outline: 3px solid var(--primary-genie);
    outline-offset: 2px;
  }
</style>

<script>
  type QuestType = 'individual' | 'business';

  // === QUEST TYPE SELECTION ===
  function selectQuestType(questType: QuestType) {
    // Store quest preference
    localStorage.setItem('selectedQuestType', questType);

    // Show achievement for selection
    if (window.GentlemanRPG?.showAchievement) {
      const questName = questType === 'individual' ? 'Individual Quest' : 'Business Quest';
      window.GentlemanRPG.showAchievement('üéØ', 'Quest Selected!', `You chose: ${questName}`);
    }

    // Update player stats
    updatePlayerStats(questType);

    // Hide non-relevant sections
    hideIrrelevantSections(questType);

    // Scroll to selected section
    const targetSection = questType === 'individual' ? 'services-individual' : 'services-business';
    scrollToSection(targetSection);
  }

  // === PLAYER STATS UPDATE ===
  function updatePlayerStats(questType: QuestType) {
    const statUpdates: { [key in QuestType]: { mp: number, xp: number } } = {
      individual: { mp: -10, xp: +50 },
      business: { mp: -15, xp: +75 }
    };

    if (window.playerStats && statUpdates[questType]) {
      const updates = statUpdates[questType];
      window.playerStats.mp = Math.max(0, window.playerStats.mp + updates.mp);
      window.playerStats.xp = Math.min(window.playerStats.maxXp, window.playerStats.xp + updates.xp);

      if (window.updatePlayerStats) {
        window.updatePlayerStats();
      }
    }
  }

  // === SECTION MANAGEMENT ===
  function hideIrrelevantSections(questType: QuestType) {
    const sections: { [key in QuestType]: string } = {
      individual: 'business-level',
      business: 'individual-level'
    };

    const sectionToHide = sections[questType];
    if (sectionToHide) {
      const section = document.getElementById(sectionToHide);
      if (section) {
        section.style.display = 'none';
        section.setAttribute('aria-hidden', 'true');
      }
    }
  }

  // === SMOOTH SCROLLING ===
  function scrollToSection(sectionId: string) {
    const section = document.getElementById(sectionId);
    if (section) {
      section.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });

      // Update focus for accessibility
      const firstFocusable = section.querySelector<HTMLElement>('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
      if (firstFocusable) {
        setTimeout(() => firstFocusable.focus(), 1000);
      }
    }
  }

  // === COUNTER ANIMATION ===
  function animateCounter(element: HTMLElement, start: number, end: number, duration: number, suffix = '') {
    const startTime = performance.now();
    const isLarge = end >= 1000;

    function updateCounter(currentTime: number) {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      const easeProgress = 1 - Math.pow(1 - progress, 3); // Ease-out cubic

      let current = Math.floor(start + (end - start) * easeProgress);

      if (isLarge) {
        current = Math.floor(current / 1000);
        suffix = 'K';
      }

      element.textContent = `+${current}${suffix}`;

      if (progress < 1) {
        requestAnimationFrame(updateCounter);
      }
    }

    requestAnimationFrame(updateCounter);
  }

  // === KEYBOARD NAVIGATION ===
  function initializeKeyboardNavigation() {
    const menuItems = document.querySelectorAll<HTMLElement>('.menu-item');

    menuItems.forEach((item, index) => {
      item.addEventListener('keydown', (e: KeyboardEvent) => {
        switch(e.key) {
          case 'Enter':
          case ' ':
            e.preventDefault();
            item.click();
            break;
          case 'ArrowDown':
            e.preventDefault();
            const nextItem = menuItems[index + 1] || menuItems[0];
            nextItem.focus();
            break;
          case 'ArrowUp':
            e.preventDefault();
            const prevItem = menuItems[index - 1] || menuItems[menuItems.length - 1];
            prevItem.focus();
            break;
          case 'Home':
            e.preventDefault();
            menuItems[0].focus();
            break;
          case 'End':
            e.preventDefault();
            menuItems[menuItems.length - 1].focus();
            break;
        }
      });
    });
  }

  // === STATS ANIMATION OBSERVER ===
  function initializeStatsAnimation() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const statValues = entry.target.querySelectorAll<HTMLElement>('.stat-value');

          // Animate each stat with different delays and values
          setTimeout(() => animateCounter(statValues[0], 0, 50, 2000), 500);
          setTimeout(() => animateCounter(statValues[1], 0, 65000, 2500), 1000);
          setTimeout(() => animateCounter(statValues[2], 0, 12000, 2000), 1500);

          // Show achievement when stats are revealed
          setTimeout(() => {
            if (window.GentlemanRPG?.showAchievement) {
              window.GentlemanRPG.showAchievement('üìä', 'Stats Revealed!', 'Your journey metrics are impressive');
            }
          }, 3000);

          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.5 });

    const heroStats = document.querySelector('.hero-stats');
    if (heroStats) {
      observer.observe(heroStats);
    }
  }

  // === INITIALIZATION ===
  document.addEventListener('DOMContentLoaded', function() {
    initializeKeyboardNavigation();
    initializeStatsAnimation();

    // Check for saved quest preference
    const savedQuestType = localStorage.getItem('selectedQuestType') as QuestType;
    if (savedQuestType) {
      hideIrrelevantSections(savedQuestType);
    }

    // Add global functions
    window.scrollToSection = scrollToSection;
    window.selectQuestType = (questType: string) => selectQuestType(questType as QuestType);
  });

  // === PERFORMANCE OPTIMIZATION ===
  // Preload critical images during idle time
  if ('requestIdleCallback' in window) {
    requestIdleCallback(() => {
      const images = ['/images/gentleman-avatar.webp', '/images/quest-icons.webp'];
      images.forEach(src => {
        const img = new Image();
        img.src = src;
      });
    });
  }
</script>
