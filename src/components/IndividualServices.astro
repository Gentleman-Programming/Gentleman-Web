---
// Individual Services - Nivel 2: Quest de Individuos con skill tree e i18n
import { t } from '../i18n/index.ts';
---

<section id="services-individual" class="min-h-screen py-20 relative overflow-hidden bg-bg-dark">
  <!-- Section Background -->
  <div class="absolute inset-0 pointer-events-none">
    <div class="starfield"></div>
    <div class="pixel-grid"></div>
    <div class="skill-tree-bg"></div>
    <div class="floating-orbs"></div>
    <div class="geometric-bg opacity-10"></div>
  </div>

  <!-- Section Header -->
  <div class="container mx-auto px-4 relative z-10">
    <div class="text-center mb-16 fade-in-up">
      <div class="section-subtitle font-code text-sm text-pixel-cyan text-center mb-2">
        <span class="blinking-cursor animate-pixel-blink">‚ñ∫</span>
        <span data-lang="en">{t('individual.subtitle', 'en')}</span>
        <span data-lang="es" style="display: none;">{t('individual.subtitle', 'es')}</span>
      </div>
      <h2 class="section-title font-heading text-4xl md:text-6xl font-bold text-text-primary mb-6">
        <span data-lang="en">{t('individual.title', 'en')} <span class="text-pixel-green text-glow-green">{t('individual.title', 'en').split(' ')[2] || 'SKILLS'}</span></span>
        <span data-lang="es" style="display: none;">{t('individual.title', 'es')} <span class="text-pixel-green text-glow-green">{t('individual.title', 'es').split(' ')[2] || 'SKILLS'}</span></span>
      </h2>
      <div class="section-description font-code text-lg md:text-xl text-text-secondary max-w-2xl mx-auto">
        <span data-lang="en">{t('individual.description', 'en')}</span>
        <span data-lang="es" style="display: none;">{t('individual.description', 'es')}</span>
      </div>
    </div>

    <!-- Skill Tree Container -->
    <div class="skill-tree-container max-w-6xl mx-auto">
      <!-- Connection Lines -->
      <div class="skill-connections">
        <div class="connection-line line-1"></div>
        <div class="connection-line line-2"></div>
        <div class="connection-line line-3"></div>
      </div>

      <!-- Skill Nodes -->
      <div class="skill-nodes grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12">

        <!-- Skill 1: Arquitectura √âpica -->
        <div class="skill-node scale-in" data-skill="architecture">
          <div class="skill-card pixel-panel">
            <!-- Skill Icon -->
            <div class="skill-icon">
              <div class="icon-architecture">üèóÔ∏è</div>
            </div>

            <!-- Skill Header -->
            <div class="skill-header">
              <h3 class="skill-title font-heading text-xl font-bold text-text-primary mb-3">
                <span data-lang="en">{t('individual.skills.architecture.title', 'en')}</span>
                <span data-lang="es" style="display: none;">{t('individual.skills.architecture.title', 'es')}</span>
              </h3>
              <div class="skill-level font-pixel text-pixel-xs text-secondary-yellow">
                LVL 1-5 EPIC
              </div>
            </div>

            <!-- Skill Description -->
            <div class="skill-description font-code text-sm text-text-secondary mb-4">
              <span data-lang="en">{t('individual.skills.architecture.description', 'en')}</span>
              <span data-lang="es" style="display: none;">{t('individual.skills.architecture.description', 'es')}</span>
            </div>

            <!-- Benefits List -->
            <div class="skill-benefits mb-6">
              <div class="benefits-title font-pixel text-pixel-xs text-pixel-green mb-3">
                <span data-lang="en">UNLOCKED ABILITIES:</span>
                <span data-lang="es" style="display: none;">HABILIDADES DESBLOQUEADAS:</span>
              </div>
              <ul class="benefits-list space-y-2" data-lang="en">
                {t('individual.skills.architecture.benefits', 'en').map((benefit: string) => (
                  <li class="benefit-item font-code text-xs text-text-secondary">
                    <span class="benefit-icon text-pixel-green">‚úì</span>
                    {benefit}
                  </li>
                ))}
              </ul>
              <ul class="benefits-list space-y-2" data-lang="es" style="display: none;">
                {t('individual.skills.architecture.benefits', 'es').map((benefit: string) => (
                  <li class="benefit-item font-code text-xs text-text-secondary">
                    <span class="benefit-icon text-pixel-green">‚úì</span>
                    {benefit}
                  </li>
                ))}
              </ul>
            </div>

            <!-- Skill Actions -->
            <div class="skill-actions">
              <button class="skill-unlock-btn btn-pixel-secondary w-full mb-2" onclick="unlockSkill('architecture')">
                <span class="btn-icon">üèóÔ∏è</span>
                <span class="btn-text" data-lang="en">{t('individual.button', 'en')}</span>
                <span class="btn-text" data-lang="es" style="display: none;">{t('individual.button', 'es')}</span>
              </button>
              <div class="skill-cost font-code text-xs text-text-secondary text-center">
                <span data-lang="en">{t('individual.buttonCost', 'en')}</span>
                <span data-lang="es" style="display: none;">{t('individual.buttonCost', 'es')}</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Skill 2: Workflow Mastery -->
        <div class="skill-node scale-in" data-skill="workflow" style="animation-delay: 0.2s;">
          <div class="skill-card pixel-panel">
            <!-- Skill Icon -->
            <div class="skill-icon">
              <div class="icon-workflow">‚öôÔ∏è</div>
            </div>

            <!-- Skill Header -->
            <div class="skill-header">
              <h3 class="skill-title font-heading text-xl font-bold text-text-primary mb-3">
                <span data-lang="en">{t('individual.skills.workflow.title', 'en')}</span>
                <span data-lang="es" style="display: none;">{t('individual.skills.workflow.title', 'es')}</span>
              </h3>
              <div class="skill-level font-pixel text-pixel-xs text-secondary-yellow">
                LVL 3-7 MASTER
              </div>
            </div>

            <!-- Skill Description -->
            <div class="skill-description font-code text-sm text-text-secondary mb-4">
              <span data-lang="en">{t('individual.skills.workflow.description', 'en')}</span>
              <span data-lang="es" style="display: none;">{t('individual.skills.workflow.description', 'es')}</span>
            </div>

            <!-- Benefits List -->
            <div class="skill-benefits mb-6">
              <div class="benefits-title font-pixel text-pixel-xs text-pixel-green mb-3">
                <span data-lang="en">UNLOCKED ABILITIES:</span>
                <span data-lang="es" style="display: none;">HABILIDADES DESBLOQUEADAS:</span>
              </div>
              <ul class="benefits-list space-y-2" data-lang="en">
                {t('individual.skills.workflow.benefits', 'en').map((benefit: string) => (
                  <li class="benefit-item font-code text-xs text-text-secondary">
                    <span class="benefit-icon text-pixel-green">‚úì</span>
                    {benefit}
                  </li>
                ))}
              </ul>
              <ul class="benefits-list space-y-2" data-lang="es" style="display: none;">
                {t('individual.skills.workflow.benefits', 'es').map((benefit: string) => (
                  <li class="benefit-item font-code text-xs text-text-secondary">
                    <span class="benefit-icon text-pixel-green">‚úì</span>
                    {benefit}
                  </li>
                ))}
              </ul>
            </div>

            <!-- Skill Actions -->
            <div class="skill-actions">
              <button class="skill-unlock-btn btn-pixel-secondary w-full mb-2" onclick="unlockSkill('workflow')">
                <span class="btn-icon">‚ö°</span>
                <span class="btn-text" data-lang="en">{t('individual.button', 'en')}</span>
                <span class="btn-text" data-lang="es" style="display: none;">{t('individual.button', 'es')}</span>
              </button>
              <div class="skill-cost font-code text-xs text-text-secondary text-center">
                <span data-lang="en">{t('individual.buttonCost', 'en')}</span>
                <span data-lang="es" style="display: none;">{t('individual.buttonCost', 'es')}</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Skill 3: Code Review -->
        <div class="skill-node scale-in" data-skill="review" style="animation-delay: 0.4s;">
          <div class="skill-card pixel-panel">
            <!-- Skill Icon -->
            <div class="skill-icon">
              <div class="icon-review">üîç</div>
            </div>

            <!-- Skill Header -->
            <div class="skill-header">
              <h3 class="skill-title font-heading text-xl font-bold text-text-primary mb-3">
                <span data-lang="en">{t('individual.skills.review.title', 'en')}</span>
                <span data-lang="es" style="display: none;">{t('individual.skills.review.title', 'es')}</span>
              </h3>
              <div class="skill-level font-pixel text-pixel-xs text-secondary-yellow">
                LVL 1-10 INSTANT
              </div>
            </div>

            <!-- Skill Description -->
            <div class="skill-description font-code text-sm text-text-secondary mb-4">
              <span data-lang="en">{t('individual.skills.review.description', 'en')}</span>
              <span data-lang="es" style="display: none;">{t('individual.skills.review.description', 'es')}</span>
            </div>

            <!-- Benefits List -->
            <div class="skill-benefits mb-6">
              <div class="benefits-title font-pixel text-pixel-xs text-pixel-green mb-3">
                <span data-lang="en">UNLOCKED ABILITIES:</span>
                <span data-lang="es" style="display: none;">HABILIDADES DESBLOQUEADAS:</span>
              </div>
              <ul class="benefits-list space-y-2" data-lang="en">
                {t('individual.skills.review.benefits', 'en').map((benefit: string) => (
                  <li class="benefit-item font-code text-xs text-text-secondary">
                    <span class="benefit-icon text-pixel-green">‚úì</span>
                    {benefit}
                  </li>
                ))}
              </ul>
              <ul class="benefits-list space-y-2" data-lang="es" style="display: none;">
                {t('individual.skills.review.benefits', 'es').map((benefit: string) => (
                  <li class="benefit-item font-code text-xs text-text-secondary">
                    <span class="benefit-icon text-pixel-green">‚úì</span>
                    {benefit}
                  </li>
                ))}
              </ul>
            </div>

            <!-- Skill Actions -->
            <div class="skill-actions">
              <button class="skill-unlock-btn btn-pixel-secondary w-full mb-2" onclick="unlockSkill('review')">
                <span class="btn-icon">üîç</span>
                <span class="btn-text" data-lang="en">{t('individual.button', 'en')}</span>
                <span class="btn-text" data-lang="es" style="display: none;">{t('individual.button', 'es')}</span>
              </button>
              <div class="skill-cost font-code text-xs text-text-secondary text-center">
                <span data-lang="en">{t('individual.buttonCost', 'en')}</span>
                <span data-lang="es" style="display: none;">{t('individual.buttonCost', 'es')}</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Quest CTA -->
      <div class="quest-cta text-center mt-16 fade-in-up">
        <div class="cta-panel pixel-panel p-8 max-w-2xl mx-auto">
          <div class="cta-title font-heading text-2xl font-bold text-text-primary mb-4">
            <span data-lang="en">{t('individual.cta', 'en')}</span>
            <span data-lang="es" style="display: none;">{t('individual.cta', 'es')}</span>
          </div>
          <div class="cta-subtitle font-code text-sm text-text-secondary mb-6">
            <span data-lang="en">Ready to level up your coding skills?</span>
            <span data-lang="es" style="display: none;">¬øListo para subir de nivel tus habilidades de programaci√≥n?</span>
          </div>
          <button class="btn-pixel-main" onclick="scheduleQuest()">
            <span class="btn-icon">üöÄ</span>
            <span class="btn-text" data-lang="en">START INDIVIDUAL QUEST</span>
            <span class="btn-text" data-lang="es" style="display: none;">INICIAR QUEST INDIVIDUAL</span>
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* === SKILL TREE BACKGROUND === */
  .skill-tree-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image:
      radial-gradient(circle at 25% 25%, rgba(0, 212, 170, 0.1) 2px, transparent 2px),
      radial-gradient(circle at 75% 75%, rgba(255, 102, 178, 0.1) 2px, transparent 2px),
      radial-gradient(circle at 50% 50%, rgba(253, 224, 71, 0.05) 1px, transparent 1px);
    background-size: 100px 100px, 150px 150px, 80px 80px;
    animation: skillTreeFloat 30s ease-in-out infinite;
  }

  @keyframes skillTreeFloat {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    33% { transform: translate(-20px, -10px) rotate(1deg); }
    66% { transform: translate(10px, -20px) rotate(-1deg); }
  }

  .floating-orbs {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image:
      radial-gradient(circle at 20% 80%, rgba(106, 79, 255, 0.3) 4px, transparent 4px),
      radial-gradient(circle at 80% 20%, rgba(0, 255, 65, 0.3) 6px, transparent 6px),
      radial-gradient(circle at 40% 40%, rgba(255, 102, 178, 0.2) 3px, transparent 3px);
    background-size: 200px 200px, 300px 300px, 150px 150px;
    animation: orbsFloat 20s ease-in-out infinite;
  }

  @keyframes orbsFloat {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-30px); }
  }

  /* === SKILL CONNECTIONS === */
  .skill-connections {
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 2px;
    z-index: 5;
    pointer-events: none;
  }

  .connection-line {
    position: absolute;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--pixel-cyan), transparent);
    opacity: 0.6;
    animation: connectionPulse 3s ease-in-out infinite;
  }

  .line-1 {
    left: 16.66%;
    width: 16.66%;
    animation-delay: 0s;
  }

  .line-2 {
    left: 50%;
    width: 16.66%;
    animation-delay: 1s;
  }

  .line-3 {
    left: 83.33%;
    width: 16.66%;
    animation-delay: 2s;
  }

  @keyframes connectionPulse {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 0.8; }
  }

  /* === SKILL NODES === */
  .skill-node {
    position: relative;
    z-index: 10;
  }

  .skill-card {
    height: 100%;
    padding: 2rem;
    background: linear-gradient(
      135deg,
      rgba(26, 26, 46, 0.9) 0%,
      rgba(22, 33, 62, 0.9) 50%,
      rgba(16, 33, 78, 0.85) 100%
    );
    border: 2px solid var(--pixel-border);
    border-radius: 12px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    min-height: 500px;
    display: flex;
    flex-direction: column;
  }

  .skill-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(0, 212, 170, 0.1),
      transparent
    );
    transition: left 0.6s ease;
  }

  .skill-card:hover::before {
    left: 100%;
  }

  .skill-card:hover {
    transform: translateY(-8px);
    border-color: var(--pixel-cyan);
    box-shadow:
      0 0 30px rgba(0, 212, 170, 0.4),
      0 16px 32px rgba(0, 212, 170, 0.2),
      inset 2px 2px 0 rgba(255, 255, 255, 0.1);
  }

  /* === SKILL ICONS === */
  .skill-icon {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .skill-icon > div {
    width: 80px;
    height: 80px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, var(--pixel-cyan), var(--pixel-green));
    border-radius: 50%;
    font-size: 2rem;
    color: var(--bg-dark);
    position: relative;
    animation: iconFloat 3s ease-in-out infinite;
    box-shadow: 0 0 20px rgba(0, 212, 170, 0.4);
  }

  .skill-icon > div::before {
    content: '';
    position: absolute;
    top: -4px;
    left: -4px;
    right: -4px;
    bottom: -4px;
    background: linear-gradient(45deg, var(--pixel-cyan), var(--pixel-green), var(--secondary-yellow));
    border-radius: 50%;
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .skill-card:hover .skill-icon > div::before {
    opacity: 1;
    animation: iconGlow 1s ease-in-out infinite alternate;
  }

  @keyframes iconFloat {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-8px); }
  }

  @keyframes iconGlow {
    0% { transform: scale(1); }
    100% { transform: scale(1.1); }
  }

  /* === SKILL CONTENT === */
  .skill-header {
    text-align: center;
    margin-bottom: 1rem;
  }

  .skill-level {
    padding: 4px 8px;
    background: rgba(253, 224, 71, 0.2);
    border: 1px solid var(--secondary-yellow);
    border-radius: 4px;
    display: inline-block;
  }

  .skill-description {
    line-height: 1.6;
    margin-bottom: 1.5rem;
    flex: 1;
  }

  /* === BENEFITS LIST === */
  .benefits-list {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid var(--pixel-border);
    border-radius: 6px;
    padding: 1rem;
  }

  .benefit-item {
    display: flex;
    align-items: flex-start;
    gap: 8px;
  }

  .benefit-icon {
    margin-top: 2px;
    font-size: 10px;
    font-weight: bold;
  }

  /* === SKILL ACTIONS === */
  .skill-actions {
    margin-top: auto;
  }

  .skill-unlock-btn {
    border-radius: 0 !important;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-family: Monaco, 'Courier New', monospace;
    font-weight: bold;
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
  }

  /* === CTA PANEL === */
  .cta-panel {
    background: linear-gradient(
      135deg,
      rgba(106, 79, 255, 0.1) 0%,
      rgba(22, 33, 62, 0.9) 100%
    );
    border: 2px solid var(--highlight-purple);
    position: relative;
  }

  .cta-panel::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--highlight-purple), transparent);
  }

  .cta-panel::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--primary-genie), transparent);
  }

  /* === RESPONSIVE DESIGN === */
  @media (max-width: 768px) {
    .skill-connections {
      display: none;
    }

    .skill-card {
      padding: 1.5rem;
      min-height: auto;
    }

    .skill-icon > div {
      width: 60px;
      height: 60px;
      font-size: 1.5rem;
    }

    .skill-title {
      font-size: 1.1rem;
    }

    .section-title {
      font-size: 2.5rem;
    }

    .cta-panel {
      padding: 1.5rem;
      margin: 0 1rem;
    }
  }

  @media (max-width: 480px) {
    .skill-nodes {
      gap: 1.5rem;
    }

    .skill-card {
      padding: 1rem;
    }

    .skill-icon > div {
      width: 50px;
      height: 50px;
      font-size: 1.2rem;
    }

    .benefits-list {
      padding: 0.75rem;
    }

    .cta-panel {
      padding: 1rem;
    }
  }

  /* === ACCESSIBILITY === */
  @media (prefers-reduced-motion: reduce) {
    .skill-tree-bg,
    .floating-orbs,
    .connection-line,
    .skill-icon > div {
      animation: none;
    }
  }

  @media (prefers-contrast: high) {
    .skill-card {
      border-width: 3px;
    }

    .benefits-list {
      border-width: 2px;
    }
  }

  /* Focus indicators */
  .skill-unlock-btn:focus-visible {
    outline: 3px solid var(--pixel-cyan);
    outline-offset: 2px;
  }
</style>

<script>
  type SkillType = 'architecture' | 'workflow' | 'review';

  // === SKILL UNLOCK SYSTEM ===
  function unlockSkill(skillType: SkillType) {
    // Store skill preference
    localStorage.setItem('selectedSkill', skillType);

    // Show achievement
    if (window.GentlemanRPG?.showAchievement) {
      const skillNames: { [key in SkillType]: string } = {
        architecture: 'Epic Architecture',
        workflow: 'Workflow Mastery',
        review: 'Code Review'
      };
      window.GentlemanRPG.showAchievement('üéØ', 'Skill Selected!', `Unlocking: ${skillNames[skillType]}`);
    }

    // Update player stats
    updateSkillStats(skillType);

    // Navigate to booking or contact
    navigateToBooking(skillType);
  }

  // === STATS UPDATE ===
  function updateSkillStats(skillType: SkillType) {
    const statUpdates: { [key in SkillType]: { xp: number, mp: number } } = {
      architecture: { xp: +100, mp: -20 },
      workflow: { xp: +150, mp: -25 },
      review: { xp: +75, mp: -15 }
    };

    if (window.playerStats && statUpdates[skillType]) {
      const updates = statUpdates[skillType];
      window.playerStats.mp = Math.max(0, window.playerStats.mp + updates.mp);
      window.playerStats.xp = Math.min(window.playerStats.maxXp, window.playerStats.xp + updates.xp);

      if (window.updatePlayerStats) {
        window.updatePlayerStats();
      }
    }
  }

  // === NAVIGATION ===
  function navigateToBooking(skillType: string) {
    // This would typically navigate to a booking system
    console.log(`üìÖ Navigating to booking for skill: ${skillType}`);

    // For now, scroll to CTA section
    const ctaSection = document.querySelector('.quest-cta');
    if (ctaSection) {
      ctaSection.scrollIntoView({ behavior: 'smooth' });
    }
  }

  function scheduleQuest() {
    // Show dialog with quest scheduling
    if (window.GentlemanRPG?.showDialog) {
      window.GentlemanRPG.showDialog(
        "Ready to start your individual quest? Contact me to schedule your personalized mentoring session!"
      );
    }
  }

  // === SKILL TREE ANIMATIONS ===
  function initializeSkillTree() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Animate skill connections
          const connections = entry.target.querySelectorAll<HTMLElement>('.connection-line');
          connections.forEach((line, index) => {
            setTimeout(() => {
              line.style.animation = 'connectionPulse 3s ease-in-out infinite';
            }, index * 200);
          });

          // Show skill unlock achievement
          setTimeout(() => {
            if (window.GentlemanRPG?.showAchievement) {
              window.GentlemanRPG.showAchievement('üåü', 'Skill Tree Unlocked!', 'Choose your path to mastery');
            }
          }, 1000);

          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.3 });

    const skillTree = document.querySelector('.skill-tree-container');
    if (skillTree) {
      observer.observe(skillTree);
    }
  }

  // === KEYBOARD NAVIGATION ===
  function initializeKeyboardNavigation() {
    const skillButtons = document.querySelectorAll<HTMLElement>('.skill-unlock-btn');

    skillButtons.forEach((button, index) => {
      button.addEventListener('keydown', (e: KeyboardEvent) => {
        switch(e.key) {
          case 'ArrowDown':
          case 'ArrowRight':
            e.preventDefault();
            const nextButton = skillButtons[index + 1] || skillButtons[0];
            nextButton.focus();
            break;
          case 'ArrowUp':
          case 'ArrowLeft':
            e.preventDefault();
            const prevButton = skillButtons[index - 1] || skillButtons[skillButtons.length - 1];
            prevButton.focus();
            break;
          case 'Home':
            e.preventDefault();
            skillButtons[0].focus();
            break;
          case 'End':
            e.preventDefault();
            skillButtons[skillButtons.length - 1].focus();
            break;
        }
      });
    });
  }

  // === INITIALIZATION ===
  document.addEventListener('DOMContentLoaded', function() {
    initializeSkillTree();
    initializeKeyboardNavigation();

    // Check for saved skill preference
    const savedSkill = localStorage.getItem('selectedSkill');
    if (savedSkill) {
      const skillCard = document.querySelector<HTMLElement>(`[data-skill="${savedSkill}"] .skill-card`);
      if (skillCard) {
        skillCard.style.border = '2px solid var(--pixel-green)';
        skillCard.style.boxShadow = '0 0 20px rgba(0, 255, 65, 0.4)';
      }
    }

    // Add global functions
    window.unlockSkill = (skillType: string) => unlockSkill(skillType as SkillType);
    window.scheduleQuest = () => scheduleQuest();
  });

  // === PERFORMANCE OPTIMIZATION ===
  // Preload skill animations during idle time
  if ('requestIdleCallback' in window) {
    requestIdleCallback(() => {
      // Preload any skill-related assets
      const skillIcons = document.querySelectorAll<HTMLElement>('.skill-icon > div');
      skillIcons.forEach(icon => {
        icon.style.willChange = 'transform';
      });
    });
  }
</script>
